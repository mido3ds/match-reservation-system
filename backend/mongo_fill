#!/usr/bin/env python3
import argparse
from datetime import datetime
from random import choice, randint, sample
import string

import bcrypt
from pymongo import MongoClient

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', default='root', help='mongodb username')
parser.add_argument('-p', '--password', default='password',
                    help='mongodb password')
parser.add_argument('--host', default='localhost', help='mongodb host')
parser.add_argument('--port', default='27017', help='mongodb port')
parser.add_argument('--db', default='test', help='mongodb db name')
parser.add_argument('--drop', action='store_true',
                    help='drop db')
parser.add_argument('--managers', default=4, type=int,
                    help='num of managers to create')
parser.add_argument('--fans', default=14, type=int,
                    help='num of fans to create')
parser.add_argument('--tickets', default=30, type=int,
                    help='num of tickets to create')
parser.add_argument('--matches', default=20, type=int,
                    help='num of matches to create')
parser.add_argument('--stadiums', default=30, type=int,
                    help='num of stadiums to create')
args = parser.parse_args()

# create
cities = ['Cairo', 'Alex', 'Ismailia', 'Giza', 'Aswan']

teamnames = ["Al-Ahly",
             "C. Cleopatra",
             "El-Bank El-Ahly",
             "El-Masry",
             "El-Mokawloon",
             "Aswan",
             "El-Zamalek",
             "Pyramids",
             "Smouha",
             "Enppi",
             "El-Esmailly",
             "El-Gouna",
             "El-Entag",
             "El-Makassa",
             "Wadi Degla",
             "El-Ettahad",
             "Tala'ea El-Gaish",
             "Ghazl El-Mahla"]


def get_seat_map(stadium):
    def get_seat(i, j):
        return {
            'id': f'{string.ascii_uppercase[i]}{j}',
            'isReserved': choice([True, False])
        }

    def get_row(i):
        return [get_seat(i, j) for j in range(1, stadium['seatsPerRow']+1)]

    return [get_row(i) for i in range(stadium['rows'])]


def get_matches(stadiums):
    matchdatetimes = [datetime.fromisoformat(f'20{i:02}-02-12T22')
                      for i in range(22)]
    stadiums = [stadiums[randint(0, len(stadiums)-1)]
                for _ in range(args.matches)]
    return [{
        'homeTeam': teamnames[i % len(teamnames)],
        'awayTeam': teamnames[(i+1) % len(teamnames)],
        'venue': f"{stadiums[i]['name']}, {stadiums[i]['city']}",
        'dateTime': choice(matchdatetimes),
        'mainReferee': f'referee{string.ascii_uppercase[i]}',
        'firstLinesman': f'firstLinesman{string.ascii_uppercase[i]}',
        'secondLinesman': f'secondLinesman{string.ascii_uppercase[i]}',
        'ticketPrice': 200,
        'seatMap': get_seat_map(stadiums[i]),
    } for i in range(args.matches)]


def get_users():
    usernames = ['admin',
                 *[f'manager{i}' for i in range(args.managers)],
                 *[f'justfan{i}' for i in range(args.fans)]]
    birthdates = [datetime.fromisoformat(
        f'19{i:02}-12-30') for i in range(100)]
    creationdates = [datetime.fromisoformat(
        f'2020-12-{i:02}') for i in range(1, 30)]
    return [{
        'username': username,
        'password': bcrypt.hashpw(str.encode(f'{username}pass'), bcrypt.gensalt()),
        'firstName': f'First{username}',
        'lastName': f'Last{username}',
        'birthDate': choice(birthdates),
        'gender': choice(['male', 'female']),
        'city': choice(cities),
        'address': f'{username} some address here',
        'email': f'{username}@example.com',
        'role': 'admin' if username == 'admin' else 'manager' if 'manager' in username else 'fan',
        'isPending': choice([True, False]) if 'manager' in username and username != 'manager0' else False,
        'createdIn': choice(creationdates),
    } for username in usernames]


def get_stadiums():
    return [{'name': f'{city} Stadium {i}', 'city': city,
             'rows': randint(1, 4), 'seatsPerRow': randint(5, 10)}
            for i, city in enumerate(sample(cities*3*args.stadiums, args.stadiums))]


def get_tickets(users, matches):
    return [{
        'matchUUID': choice(matches)['_id'],
        'seatID': f'{choice("ABC")}{randint(1,4)}',
        'username': choice(users)['username'],
        'price': 200,
    } for i in range(args.tickets)]


def get_non_pending(users):
    return [
        user['username'] for user in users
        if 'manager' in user['username'] and not user['isPending']
    ]


# fill
connection = f"mongodb://{args.user}:{args.password}@{args.host}:{args.port}"

with MongoClient(connection) as client:
    if args.drop or input(f'Drop db named {args.db}? y/[n] ').lower() in ['y', 'yes']:
        client.drop_database(args.db)
        print('dropped db')

    db = client[args.db]

    stadiums = get_stadiums()
    db['stadia'].insert_many(stadiums)
    print('inserted', len(stadiums), 'stadiums')

    matches = get_matches(stadiums)
    db['matches'].insert_many(matches)
    print('inserted', len(matches), 'matches')

    users = get_users()
    db['users'].insert_many(users)
    print('inserted', len(users), 'users')
    print('users are', [user['username'] for user in users],
          'password of {username} is {username}pass')
    print('non-pending managers are', get_non_pending(users))

    tickets = get_tickets(users, matches)
    db['tickets'].insert_many(tickets)
    print('inserted', len(tickets), 'tickets')
